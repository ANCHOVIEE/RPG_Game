class BaseCharacter { //empty character object constructor
  constructor(name, race, strength, dexterity, charisma, intelligence, type, weapon, power){
    this.name = name;
    this.race = race;
    this.strength = strength;
    this.dexterity = dexterity;
    this.charisma = charisma;
    this.intelligence = intelligence;
    this.type = type;
    this.weapon = weapon;
    this.power = power;
    this.health = 50;
    this.item = false;
  }
  get healthbar(){
    alert(`Healthbar: ${this.health}`);
    }
  set injury(damage){
    this.health -= damage;
    }
  statShow() {
    let stats = '';
    for (prop in this){
      stats += prop + ': ' + this[prop] + '\n';
    }
    return stats;
  }
}

const charData = { //Object to hold all the character/class stats
  //Race
  'dwarf': ['Dwarf', 3, 1, 1, 4],
  'orc': ['Orc', 4, 2, 0, 1],
  'talking dog': ['Talking Dog', 1, 3, 0, 5],
  'ent': ['Ent', 5, 1, 2, 3],
  //Class
  'warlock': ['Warlock', 'Magic Staff', 'spell of influence'],
  'thief': ['Thief', 'Throwing Knives', 'sneak'],
  'warrior': ['Warrior', 'Great Sword', 'power swing'],
  'bard': ['Bard', 'Lute Axe', 'song'],
  //Enemies
  'ogress': 200,
  'bartender': 5,
  'ranger': 8,
  'ranger2': 1,
  'bandits': 12,
  'flood': 14,
  'dragon': 17
}

const charSave = {}; // Empty object to hold the new player info


const functionality = {
  charSelect: function () {
    while(name === null || name === "" || race === null || race === "" ||  type === null || type === "") {
    alert('Answer these questions three, foolish mortal!');
    const name = prompt('What is your character name?');
    const race = prompt('Choose your race: Dwarf, Talking Dog, Ent, or Orc');
    const type = prompt('Choose your class: Warrior, Bard, Warlock, or Thief');

    if (name !== null && charData[race.toLowerCase()] && charData[type.toLowerCase()]) { 
      charSave.newPlayer = new BaseCharacter(name, ...charData[race.toLowerCase()], ...charData[type.toLowerCase()]);
      if (charSave.newPlayer.type === 'Bard'){
        charSave.newPlayer.charisma += 2;
      } else if(charSave.newPlayer.type === 'Warrior'){
        charSave.newPlayer.strength += 2;
      } else if (charSave.newPlayer.type === 'Thief'){
        charSave.newPlayer.dexterity += 2;
      } else if (charSave.newPlayer.type === 'Warlock'){
        charSave.newPlayer.intelligence += 2;
      };
      alert(`Nice to meet you ${name} the ${race} ${type}!`);
      alert(charSave.newPlayer.statShow());
      break;
    }
   }  
  },
  dieRoll: () => {
    roll = Math.floor((Math.random() * 20) + 1);
    alert(`You rolled a ${roll}`)
    return roll;},
  skillCheck: function (chapter, scene, enemy){
    const encounter = plotLine[chapter][scene]['encounterType'];
    const rand = this.dieRoll();
    const skillPoint = charSave.newPlayer[encounter];
    if(rand + skillPoint >= charData[enemy]){
      return true;
    } else {
      return false;
    }
  },
  choice: ask => prompt(ask),
  storyChoice: function (chapter, scene, responseLow, enemy){
    const success = this.skillCheck(chapter, scene, enemy);
    //successful outcome
    if(success === true) {
      alert(plotLine[chapter][scene][responseLow]['success']);
      //roll save from item
    } else if (plotLine[chapter][scene]['item'] && charSave['newPlayer']['item']){
      alert(plotLine[chapter][scene]['itemSave']);
      //fail outcome
    } else {
      alert(plotLine[chapter][scene][responseLow]['fail']);
      charSave.newPlayer.injury = plotLine[chapter][scene][responseLow]['injury'];
      charSave.newPlayer.healthbar;
    }
    return;
  },
  storyScene: function (chapter, scene, enemy){
    alert(plotLine[chapter][scene]['opener']);
    //story opener
    let response = "";
    //repeat until string response
    while(response === null || response === ""){
      //prompt scene question to user
      response = this.choice(plotLine[chapter][scene]['question']);
      if (response !== null && response !== ""){
        //if string response, set to lowercase
        let responseLow = response.toLowerCase();
        //is there a scene option for that response
        if (plotLine[chapter][scene][response.toLowerCase()]){
          //invoke storyChoice
          this.storyChoice(chapter, scene, responseLow, enemy);
          break;
        };
      };
    };
    return;
  },
    storyChoice: function (chapter, scene, responseLow, enemy){
    const success = this.skillCheck(chapter, scene, enemy);
    //successful outcome
    if(success === true) {
      alert(plotLine[chapter][scene][responseLow]['success']);
      //roll save from item
    } else if (plotLine[chapter][scene]['item'] && charSave['newPlayer']['item']){
      alert(plotLine[chapter][scene]['itemSave']);
      //fail outcome
    } else {
      alert(plotLine[chapter][scene][responseLow]['fail']);
      charSave.newPlayer.injury = plotLine[chapter][scene][responseLow]['injury'];
      charSave.newPlayer.healthbar;
    }
    return;
  },
//   storyScene: function (chapter, scene, enemy){
//     alert(plotLine[chapter][scene]['opener']);
//     //story opener
//     let response = "";
//     //repeat until string response
//     while(response === ""){
//       //prompt scene question to user
//       response = this.choice(plotLine[chapter][scene]['question']);
//       if (response === null){
//         break;
//       }
//       if (response !== null && response !== ""){
//         //if string response, set to lowercase
//         let responseLow = response.toLowerCase();
//         //is there a scene option for that response
//         if (plotLine[chapter][scene][response.toLowerCase()]){
//           //story choice outcomes
//           const success = this.skillCheck(chapter, scene, enemy);
//           //successful outcome
//           if(success === true) {
//             alert(plotLine[chapter][scene][responseLow]['success']);
//             //roll save from item
//           } else if (plotLine[chapter][scene]['item'] && charSave['newPlayer']['item']){
//             alert(plotLine[chapter][scene]['itemSave']);
//             //fail outcome
//           } else {
//             alert(plotLine[chapter][scene][responseLow]['fail']);
//             charSave.newPlayer.injury = plotLine[chapter][scene][responseLow]['injury'];
//             charSave.newPlayer.healthbar;
//           };
//           break;
//         };
//       };
//     };
//     return;
//   },
// }

functionality.charSelect();

//Object to hold all of our responses and story alerts
const plotLine = {
  storyOpener: `You drunkenly awake moments before dawn. Your face is sunken into the sharp pebble road. You think about your life choices. Your inheritance you received yesterday and all the mead you drank las-\n...Your inheritance \nYour 500 gold pieces are gone... \nAt least you still have your trusty ${charSave.newPlayer.weapon}.`,
  tavernChapter: {
    tavernScene1 : {
      encounterType: 'charisma',
      opener: `You step inside the dim pub. \nDifferent fantastical creatures are hunched over, slurping on their ales, and sinking into their day drinking habits.`,
      question: `Do you want to:\nA: Smooth talk the ogress nearby.\nB: Smooth talk her unattended, half-empty stein of mead.`,
      a: {
        success: `You smith up a romantic verse. “When the monks said your body is a temple, they weren’t kidding!” The Ogress, hands you her address on a parchment paper. `,
        fail: `You fumble with your words. \n \“Damn, girl, you large... uh, In a good way, for your kind, I mean...\” \n The Ogress throws her grog in your face. You’re now soaked in more than shame.`,
        injury: 50, 
      },
      b: {
        success: `You taste the familiar flavor of ogre backwash. Mmmmm, mucusy.`,
        fail: `It's a trap! She poisoned the mead with iocane powder! Luckily, you've been developing an immunity over the last few years and you only get a slight headache.`,
        injury: 50
      }
    },
    tavernScene2: {
      encounterType: 'charisma',
      opener: `You step up to the bar and the bartender collapses in height.\nYou look over the bar only to realize he is an old hobbit leaning a stack of step ladders.`,
      question: `Bartender: Well, if it isn’t the big spender from last night!\n What happened? Did ye found out buying rounds for the entire pub isn't sustainable?\nYou say:\nA: Your height isn't sustainable!\nB: Actually, I was robbed of all my gold last night. Could you help me?`,
      a: {
        success: `Bartender: I outta wallop you for that, but it just so happens a fool like you might be useful.`,
        fail: `The bartender jumped over the bar like a 4'2 ninja and shanked you. You bled out on the floor while the town doctor sipped on a pint in the corner.`,
        injury: 50
      },
      b: {
        success: `Bartender: We’ve all been there, friend. Happens every weekend, now that I think about it... \nLook, since you gave me a good amount before losing it, I’ll help.`,
        fail: `The bartender boxes your right ear before you know what's happening.\n Bartender: I'll help you learn some common sense, kid!`,
        injury: 50
      }
    },
    tavernScene3: {
      encounterType: 'dexterity',
      opener: `Bartender: Listen here, ${charSave.newPlayer.name}. There’s a Ranger in yon corner, offering a big reward for some quest that's got the Mayor all worked up.\nTold me to send him the best people. I’ll put in a good word for ye if you give me a cut.`,
      question: `You walk up towards the Ranger, he seems unfazed. In a flash, he grabs and chucks his mug at your face!\nDo you want to:\nA: Duck!\nB: Use your ${charSave.newPlayer.weapon} to hit that mug back to his smug face.`,
      a: {
        success: `You dodge the mug like a legendary hero from bards’ songs. Angrily, you approach the Ranger.`,
        fail: `The mug smashes on your head and blood streams down your face. You do your best to maintain a tough facade in front of the tavern on-lookers. "Tis' only a flesh wound!", you announce to the disinterested crowd.`,
        injury: 50
      },
      b: {
        success: `Your mighty swing connects right to the mug and it explodes into hundreds of shards. The Ranger's face is strew with glass and blood, yet he looks at you with a crazed grin.`,
        fail: `You take a mighty swing and a miss! The mug smashes on the wall next to your head and soaks your face in ale. Embarassing. You scrape together what's left of your dignity and storm over to the Ranger, weapon in hand.`,
        injury: 50
      }
    },
    tavernScene4: {
      encounterType: 'intelligence',
      opener: `Ranger: Ha! You're funny. Look, the Mayor of this town lost his Sparkly Golden Thong and needs it back.\nI'm not in this life for the of fetching thongs, gold or no. You can get all the rewards, just say I did it.`,
      question: `You say:\nA: I hate you.\nB: I'll do it! For the money, of course.\nC: All of this seems tiresome.`,
      a: {
        success: `Ranger: Great! On you go! Through those woods, then past the valley and up the mountain. Child's play for an adventurer like you! Ta-ta!`,
        fail: `The ranger chops your head clean off! Try to sass him now, smart stuff. `,
        injury: 50
      },
      b: {
        success: `Ranger: Great! On you go! Through those woods, then past the valley and up the mountain. Child's play for an adventurer like you! Ta-ta!`,
        fail: `Ranger: MONEY?! Being an adventurer is about GLORY and HONOR. BEGONE WITH YE, SCUM.`,
        injury: -50
      },
      c: {
        success: `Ranger: Great! On you go! Through those woods, then past the valley and up the mountain. Child's play for an adventurer like you! Ta-ta!`,
        fail: `Ranger: Great! On you go! Through those woods, then past the valley and up the mountain. Child's play for an adventurer like you! Ta-ta!`,
        injury: 0
      }, 
    },
    closer: `He leads you to the back door where a dark, thick forest stretches out into the distance. What have you gotten yourself into?`
  },
  banditChapter: {
    bandtiScene1: {
    }
  },
  floodChapter: {
    floodScene1: {
      encounterType: 'dexterity',
      opener: `You feel a splash of cold water hit your nose; suddenly the sky opens up and water pours onto the ground around you. You look around and realize that you are in a wash with the water quickly rising around your ankles! You look towards the opposite bank, a steep wall of boulders. Will you climb them to safety before the flood sweeps you away??`,
      question: `Would you like to: \nA: Climb like your life depends on it? (Spoiler: It does.) n\B: Try to outrun the flood and look downstream for an easier crossing? n\C: Wait this one out. Flood shmud, you've seen bigger.`,
      a: {
      success: `No time like the present! You reach up with your right hand grasping the largest handhold you can find and get moving. Slowly you make your way up the wall, carefully choosing one hold after the other, but it's so slippery you might as well have eels for hands. Eel Hands the ${charSave.newPlayer.race} they would call you...\nFinally, you feel your hand reach over the edge of the wall, find a knarled bush to grab onto, and hoist yourself over the edge. You lay on your back breathing heavily before climbing to your feet and continuing on up the mountain.`,
      fail: `No time like the present! You reach up with your right hand grasping the largest handhold you can find and get moving. Slowly you make your way up the wall, carefully choosing one hold after the other, but it's so slippery you might as well have eels for hands. Eel Hands the ${charSave.newPlayer.race} they would call you...\nThe wall is becoming more and more treacherous. First your right foot slips, then your weight lurches to the side as you lose your grip. Hurtling through the air toward the ground you think to yourself, "EEL FEEEEEET"`,
      injury: 50
    },
      b: {
        success: `You spot a place downstream where it seems easier to climb out of your perilous predicament. You just make it to the top when the flash flood comes rushing through the wash and drowning everything in it's path. You would have been toast! Yikes!`,
        fail:`You decide to head downstream a little to see if you can find an easier climb, but you are caught by a sudden flash flood rushing towards you. You run to a nearby tree and get as high as you can while holding on for dear life!\nYou hear a thunderous craking sound as you and the tree come crashing down, yet you keep your grip. The fallen tree has now formed a bridge to the other side! Banged up and scared out of your wits you cross the tree and continue on up the mountain.`,
        injury: 15
      },
      c: {
        success: `The water begins to rise in earnest and here you are looking like a dope without a plan! Luckily, the gods have smiled upon your brazen apathy. Just as a flash flood comes careening towards you, a huge gust of wind lifts you up and safely deposits you at the top of the boulder pile. You thank your luck stars and head up the mountain.`,
        fail: `The wash is filling up fast, but you decide to use that to your advantage and wait for the water to rise high enough to carry you out of the wash. Suddenly, a flash flood comes careening towards you and you are struck from behind by a big rock. You are swept off your feet and hurtle downstream with the current. As you start to lose consciousness, you realize that you might have made the wrong choice.`,
        injury: 50
      }
    }
  },
  dragonChapter: {
    dragonScene1: {
      encounterType: 'intelligence',
      opener: `The day wears on as you begin to ascend the mountain. Higher and higher you climb, while seeing puffs of smoke coming from the distant top. When you finally reach the last crest you see a cave...`,
      question: `Do you want to: \n A. Go inside the cave \n B. Go back home and rethink your life choices /n C. Jump off the cliff`,
      a: {
        success: `You slowly creep inside the cave with your ${charSave.newPlayer.weapon} in one hand and a makeshift torch in the other. You begin to see piles of gold scattered around. The golden treasures are more wondurous the deep you go, but the heat of the place is also rising...`,
        fail: `You get out your ${charSave.newPlayer.weapon} and slowly creep inside the cave. You stumble through the darkness getting a few scrapes along the way. You begin to see piles of gold scattered around.The golden treasures are more wondurous the deep you go, but the heat of the place is also rising...`,
        injury: 2
      }
    }
  } 
 }



// function tavern(){
//   while(charSave.newPlayer.health > 0 || charSave.newPlayer.health <= 50){
//     functionality.storyScene('tavernChapter', 'tavernScene1', 'ogress');
//     functionality.storyScene('tavernChapter', 'tavernScene2', 'bartender');
//     functionality.storyScene('tavernChapter', 'tavernScene3', 'ranger');
//     functionality.storyScene('tavernChapter', 'tavernScene4', 'none');
//     alert(plotLine.tavernChapter.closer);

//     if (charSave.newplayer.health <= 0){
//       break;
//     }
//   }
//   return;
// };


// function gameMaster(){
//   while (charSave.newPlayer.health > 0 || charSave.newPlayer.health <= 50){
//     if (charSave.newPlayer.health <= 0){
//       alert(`You're dead! Enjoy the afterlife`);
//       break;
//     } else if (charSave.newPlayer.health > 50){
//       alert(`You survived! \n Game Over`);
//       break;
//     };
//     startStory = alert(plotLine.storyOpener);
//     //tavern
//     functionality.storyScene('tavernChapter', 'tavernScene1', 'ogress');
//     functionality.storyScene('tavernChapter', 'tavernScene2', 'bartender');
//     functionality.storyScene('tavernChapter', 'tavernScene3', 'ranger');
//     functionality.storyScene('tavernChapter', 'tavernScene4', 'ranger2');
//     alert(plotLine.tavernChapter.closer);
//     //Woods
//     //Flood
//     functionality.storyScene('floodChapter', 'floodScene1', 'flood');
//     break;

//   };
//   replay();
// };
const stories = [['tavernChapter', 'tavernScene1', 'ogress'],['tavernChapter', 'tavernScene2', 'bartender'], ['tavernChapter', 'tavernScene3', 'ranger'], ['tavernChapter', 'tavernScene4', 'ranger2'] ]

function gameMaster(){
  startStory = alert(plotLine.storyOpener);
    //tavern
   functionality.storyScene('tavernChapter', 'tavernScene1', 'ogress');
    functionality.storyScene('tavernChapter', 'tavernScene2', 'bartender');
    functionality.storyScene('tavernChapter', 'tavernScene3', 'ranger');
    functionality.storyScene('tavernChapter', 'tavernScene4', 'ranger2');
    alert(plotLine.tavernChapter.closer);
    //Woods
    //Flood
    functionality.storyScene('floodChapter', 'floodScene1', 'flood');
    break;

  };
  replay();
};

function replay() {
  replay = prompt('Would you like to play again? \n Yes or No');
  if (replay === null || replay === "" || replay.toLowerCase() !== 'yes') {
    alert(`Fairwell, adventurer!`);
    return;
    } else if (replay.toLowerCase() === 'yes'){
    functionality.charSelect();
    gameMaster();
    } 
};

gameMaster();
